######################################
# Lucians BASHRC File                #
# Modified on: 12/17/2010            #
######################################

########## DEFAULTS ##################
# Check for an interactive session
[ -z "$PS1" ] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '
########## END DEFAULTS ##############

########## PATH MODIFICATION #########
if ! echo $PATH|grep /home/$USER/Scripts; then
	PATH="$PATH:/home/$USER/Scripts"
	export PATH
fi

######################################

########## FUNCTIONS #################
    function stripaudio()
	{
		ffmpeg -i $1 -ab 128 -ar 44100 $2
	}

    function noman()
	{
	BASEURL='http://man.cx'
	XMLLINT='xmllint --html'
	XPATH_EXPR='--xpath //*[@id="manpage"]/pre'
	p=0

	case $# in
	  1) PAGE=$1 ;;
	  2) SECTION="($1)"
	     PAGE=$2 ;;
	  *) echo "Usage: ${0##*/} [section] manpage" >&2; p=1;
	esac

	if [ $p -eq 0 ]; then
		curl -s $BASEURL/$PAGE$SECTION | $XMLLINT $XPATH_EXPR - 2>/dev/null | 
		sed 's|</\?[^>]\+>||g;s|&lt\;|<|g;s|&gt\;|>|g' | ${PAGER:-less}
	fi
	}

    function msu()
	{
		[ $# -eq 0 ] || [ $# -lt 2 ] && echo '			Usage: msu [FILENAME] [INTERPRETER]
			FILENAME - Can either be /path/to/filename or without /path/to for cwd.
			INTERPRETER - Dont use /path/to/interpreter, just the name
			              of the interpreter.' && return 1

		shabang='#!'
		interp=''
		chosen_interp="$2"		
		chosen_fn="$1"
		shift;shift
		chosen_args="$*"		

		locator="$(which $chosen_interp 2> /dev/null)"

		if [[ "$locator" != "" ]]; then
			interp="$shabang$locator"
		else
			interp='#!/bin/bash'
		fi

		if [ -f "$chosen_fn" ]; then
			read -p "$chosen_fn is an existing file, over-write? (y/n) " action
		else
			action="y"
		fi

		case $action in
			y | Y) echo "$interp $chosen_args" > $chosen_fn && chmod +x $chosen_fn && echo "msu: success" && return 0	;;
			n | N) echo "msu: actions aborted" && return 0					;;
			*) echo "msu: $action: invalid response" &&  return 0				;;
		esac

	}

	function up() {
		BACKDIRECTORY=$PWD
		local x=''
		for i in $(seq ${1:-1})
			do
				x="$x../"
			done
		cd $x
	}

	function extract()
	{
		if [ -f $1 ] ; then
			case $1 in
				*.tar.bz2)	tar xvjf $1   ;;
				*.tar.gz)	tar xvzf $1   ;;
				*.bz2)		bunzip2 $1    ;;
				*.rar)		unrar x $1    ;;
				*.gz)		gunzip $1     ;;
				*.tar)		tar xvf $1    ;;
				*.tbz2)		tar xvjf $1   ;;
				*.tgz)		tar xvzf $1   ;;
				*.zip)		unzip $1      ;;
				*.Z)		uncompress $1 ;;
				*.7z)		7z x $1       ;;
				*)		echo "$1 cannot be extract via >extract<" ;;
			esac
		else
			echo "$1 is not a valid file."
		fi
	}

	function lowercase()
	{
		for file ; do
			filename=${file##*/}
			case "$filename" in
				*/*) dirname==${file%/*} ;;
				*) dirname=.;;
			esac
			nf=$(echo $filename | tr A-Z a-z)
			newname="${dirname}/${nf}"
			if [ "$nf" != "$filename" ]; then
				mv "$file" "$newname"
				echo "lowercase: $file â€“> $newname"
			else
				echo "lowercase: $file not changed."
			fi
		done
	}

	function swap()
	{
		local TMPFILE=tmp.$$

		[ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
		[ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
		[ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

		mv "$1" $TMPFILE
		mv "$2" "$1"
		mv $TMPFILE "$2"

	}

	function remindme()
	{
		[ "$#" -ne 2 ] && echo "This function requries two arguments." && return 1
		sleep $1 && notify-send "Reminder" "$2" &
	}
	
	function repeat()
	{
		local i max
		max=$1; shift;
		for ((i=1; i <= max; i++)); do
			eval "$@";
		done
	}

	function ask()
	{
		echo -n "$@" '[y/N] '; read ans
		case "$ans" in
			y*|Y*) return 0 ;;
			n*|N*) return 1 ;;
		esac
	}
######################################

########## ALIASES ###################
# Customs
alias search='pacman -Ss $@'
alias rescreen='screen -r $(pidof screen)'
alias termcop='xclip -selection clipboard'
alias ll='ls -lh --color=auto'
alias la='ls -ah --color=auto'
alias lla='ls -lha --color=auto'
alias pong='ping -c 4'
alias weechat='weechat-curses'
alias extip='echo $(curl ifconfig.me)'
alias exthost='echo $(curl ifconfig.me/host)'
alias clean='sudo pacman -Scc'
alias tker='tail -fn /var/log/kernel.log'
alias brc='nano --nowrap ~/.bashrc'
alias serveit='nc -vlc 127.0.0.1 -p 8080 <'
alias resource='source ~/.bashrc'

# Modifiers
alias nano='nano --nowrap'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias df='df -h'
alias more='less'

######################################

########## COLOR CODES ###############
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset
######################################
